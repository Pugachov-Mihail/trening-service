// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/trening.proto

package trening_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TreningService_GetTreningList_FullMethodName     = "/TreningService/GetTreningList"
	TreningService_GetUserTrenings_FullMethodName    = "/TreningService/GetUserTrenings"
	TreningService_AddTreningUser_FullMethodName     = "/TreningService/AddTreningUser"
	TreningService_DeletedTreningUser_FullMethodName = "/TreningService/DeletedTreningUser"
	TreningService_GetCurrentTrening_FullMethodName  = "/TreningService/GetCurrentTrening"
)

// TreningServiceClient is the client API for TreningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreningServiceClient interface {
	// Список всех тренировок в приложении
	GetTreningList(ctx context.Context, in *GetTreningListRequest, opts ...grpc.CallOption) (*GetTreningListResponse, error)
	// Список тренировок пользователя
	GetUserTrenings(ctx context.Context, in *AddTreningRequest, opts ...grpc.CallOption) (*GetTreningListResponse, error)
	// Добавление в список тренировок пользавателя
	AddTreningUser(ctx context.Context, in *AddTreningRequest, opts ...grpc.CallOption) (*GetTreningListResponse, error)
	// Удаление тренировки у пользователя
	DeletedTreningUser(ctx context.Context, in *AddTreningRequest, opts ...grpc.CallOption) (*GetTreningListResponse, error)
	// Получение текущей информации по тренировке
	// TODO возможно данный метод будет удален после связки с приложением из-за не надобности
	GetCurrentTrening(ctx context.Context, in *TreningIdRequest, opts ...grpc.CallOption) (*GetCurrentTreningResponse, error)
}

type treningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTreningServiceClient(cc grpc.ClientConnInterface) TreningServiceClient {
	return &treningServiceClient{cc}
}

func (c *treningServiceClient) GetTreningList(ctx context.Context, in *GetTreningListRequest, opts ...grpc.CallOption) (*GetTreningListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTreningListResponse)
	err := c.cc.Invoke(ctx, TreningService_GetTreningList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treningServiceClient) GetUserTrenings(ctx context.Context, in *AddTreningRequest, opts ...grpc.CallOption) (*GetTreningListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTreningListResponse)
	err := c.cc.Invoke(ctx, TreningService_GetUserTrenings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treningServiceClient) AddTreningUser(ctx context.Context, in *AddTreningRequest, opts ...grpc.CallOption) (*GetTreningListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTreningListResponse)
	err := c.cc.Invoke(ctx, TreningService_AddTreningUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treningServiceClient) DeletedTreningUser(ctx context.Context, in *AddTreningRequest, opts ...grpc.CallOption) (*GetTreningListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTreningListResponse)
	err := c.cc.Invoke(ctx, TreningService_DeletedTreningUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treningServiceClient) GetCurrentTrening(ctx context.Context, in *TreningIdRequest, opts ...grpc.CallOption) (*GetCurrentTreningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentTreningResponse)
	err := c.cc.Invoke(ctx, TreningService_GetCurrentTrening_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreningServiceServer is the server API for TreningService service.
// All implementations must embed UnimplementedTreningServiceServer
// for forward compatibility.
type TreningServiceServer interface {
	// Список всех тренировок в приложении
	GetTreningList(context.Context, *GetTreningListRequest) (*GetTreningListResponse, error)
	// Список тренировок пользователя
	GetUserTrenings(context.Context, *AddTreningRequest) (*GetTreningListResponse, error)
	// Добавление в список тренировок пользавателя
	AddTreningUser(context.Context, *AddTreningRequest) (*GetTreningListResponse, error)
	// Удаление тренировки у пользователя
	DeletedTreningUser(context.Context, *AddTreningRequest) (*GetTreningListResponse, error)
	// Получение текущей информации по тренировке
	// TODO возможно данный метод будет удален после связки с приложением из-за не надобности
	GetCurrentTrening(context.Context, *TreningIdRequest) (*GetCurrentTreningResponse, error)
	mustEmbedUnimplementedTreningServiceServer()
}

// UnimplementedTreningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTreningServiceServer struct{}

func (UnimplementedTreningServiceServer) GetTreningList(context.Context, *GetTreningListRequest) (*GetTreningListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreningList not implemented")
}
func (UnimplementedTreningServiceServer) GetUserTrenings(context.Context, *AddTreningRequest) (*GetTreningListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTrenings not implemented")
}
func (UnimplementedTreningServiceServer) AddTreningUser(context.Context, *AddTreningRequest) (*GetTreningListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTreningUser not implemented")
}
func (UnimplementedTreningServiceServer) DeletedTreningUser(context.Context, *AddTreningRequest) (*GetTreningListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletedTreningUser not implemented")
}
func (UnimplementedTreningServiceServer) GetCurrentTrening(context.Context, *TreningIdRequest) (*GetCurrentTreningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTrening not implemented")
}
func (UnimplementedTreningServiceServer) mustEmbedUnimplementedTreningServiceServer() {}
func (UnimplementedTreningServiceServer) testEmbeddedByValue()                        {}

// UnsafeTreningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreningServiceServer will
// result in compilation errors.
type UnsafeTreningServiceServer interface {
	mustEmbedUnimplementedTreningServiceServer()
}

func RegisterTreningServiceServer(s grpc.ServiceRegistrar, srv TreningServiceServer) {
	// If the following call pancis, it indicates UnimplementedTreningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TreningService_ServiceDesc, srv)
}

func _TreningService_GetTreningList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreningListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreningServiceServer).GetTreningList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreningService_GetTreningList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreningServiceServer).GetTreningList(ctx, req.(*GetTreningListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreningService_GetUserTrenings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTreningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreningServiceServer).GetUserTrenings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreningService_GetUserTrenings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreningServiceServer).GetUserTrenings(ctx, req.(*AddTreningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreningService_AddTreningUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTreningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreningServiceServer).AddTreningUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreningService_AddTreningUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreningServiceServer).AddTreningUser(ctx, req.(*AddTreningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreningService_DeletedTreningUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTreningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreningServiceServer).DeletedTreningUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreningService_DeletedTreningUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreningServiceServer).DeletedTreningUser(ctx, req.(*AddTreningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreningService_GetCurrentTrening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreningIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreningServiceServer).GetCurrentTrening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreningService_GetCurrentTrening_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreningServiceServer).GetCurrentTrening(ctx, req.(*TreningIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TreningService_ServiceDesc is the grpc.ServiceDesc for TreningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TreningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TreningService",
	HandlerType: (*TreningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTreningList",
			Handler:    _TreningService_GetTreningList_Handler,
		},
		{
			MethodName: "GetUserTrenings",
			Handler:    _TreningService_GetUserTrenings_Handler,
		},
		{
			MethodName: "AddTreningUser",
			Handler:    _TreningService_AddTreningUser_Handler,
		},
		{
			MethodName: "DeletedTreningUser",
			Handler:    _TreningService_DeletedTreningUser_Handler,
		},
		{
			MethodName: "GetCurrentTrening",
			Handler:    _TreningService_GetCurrentTrening_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/trening.proto",
}
